Metadata-Version: 1.1
Name: httmock
Version: 1.2.6
Summary: A mocking library for requests.
Home-page: https://github.com/patrys/httmock
Author: Patryk Zawadzki
Author-email: patrys@room-303.com
License: Copyright 2013 Patryk Zawadzki

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
Description: httmock
        =======
        
        A mocking library for `requests` for Python 2.6, 2.7, 3.2, 3.3 and 3.4.
        
        Installation
        ------------
        
            pip install httmock
        
        Or, if you are a Gentoo user:
        
            emerge dev-python/httmock
        
        Usage
        -----
        You can use it to mock third-party APIs and test libraries that use `requests` internally, conditionally using mocked replies with the `urlmatch` decorator:
        
        ```python
        from httmock import urlmatch, HTTMock
        import requests
        
        @urlmatch(netloc=r'(.*\.)?google\.com$')
        def google_mock(url, request):
            return 'Feeling lucky, punk?'
        
        with HTTMock(google_mock):
            r = requests.get('http://google.com/')
        print r.content  # 'Feeling lucky, punk?'
        ```
        
        The `all_requests` decorator doesn't conditionally block real requests. If you return a dictionary, it will map to the `requests.Response` object returned:
        
        ```python
        from httmock import all_requests, HTTMock
        import requests
        
        @all_requests
        def response_content(url, request):
        	return {'status_code': 200,
        	        'content': 'Oh hai'}
        
        with HTTMock(response_content):
        	r = requests.get('https://foo_bar')
        
        print r.status_code
        print r.content
        ```
        
        If you pass in `Set-Cookie` headers, `requests.Response.cookies` will contain the values. You can also use `response` method directly instead of returning a dict:
        
        ```python
        from httmock import all_requests, response, HTTMock
        import requests
        
        @all_requests
        def response_content(url, request):
        	headers = {'content-type': 'application/json',
        	           'Set-Cookie': 'foo=bar;'}
        	content = {'message': 'API rate limit exceeded'}
        	return response(403, content, headers, None, 5, request)
        
        with HTTMock(response_content):
        	r = requests.get('https://api.github.com/users/whatever')
        
        print r.json().get('message')
        print r.cookies['foo']
        ```
Keywords: requests,testing,mock
Platform: UNKNOWN
Classifier: Programming Language :: Python
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Testing
Classifier: Operating System :: OS Independent
