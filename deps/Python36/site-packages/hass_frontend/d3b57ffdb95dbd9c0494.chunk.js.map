{"version":3,"sources":["webpack:///./node_modules/@polymer/paper-toast/paper-toast.js","webpack:///./src/managers/notification-manager.js"],"names":["currentToast","Object","polymer_fn","a","_template","html_tag","is","behaviors","iron_overlay_behavior","properties","fitInto","type","value","window","observer","horizontalAlign","String","verticalAlign","duration","Number","text","noCancelOnOutsideClick","Boolean","noAutoFocus","listeners","transitionend","visible","polymer_legacy","_warn","this","opened","_canAutoClose","Infinity","created","_autoClose","iron_a11y_announcer","requestAvailability","show","property","indexOf","open","hide","close","__onTransitionEnd","e","target","propertyName","_finishRenderOpened","_finishRenderClosed","_openedChanged","cancelAsync","fire","async","b","apply","arguments","_renderOpened","classList","add","_renderClosed","remove","_onFitIntoChanged","positionTarget","customElements","define","localize_mixin","polymer_element","template","hass","wasConnected","connectionLost","computed","_cancelOnOutsideClick","_text","readOnly","toastClass","hassChanged","connected","connection","computeConnectionLost","constructor","super","handleWindowChange","bind","_mediaq","matchMedia","addListener","connectedCallback","disconnectedCallback","removeListener","ev","$","toast","toggle","matches","connToast","showNotification","message","_set_text"],"mappings":"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","file":"d3b57ffdb95dbd9c0494.chunk.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/**\nMaterial design: [Snackbars & toasts](https://www.google.com/design/spec/components/snackbars-toasts.html)\n\n`paper-toast` provides a subtle notification toast. Only one `paper-toast` will\nbe visible on screen.\n\nUse `opened` to show the toast:\n\nExample:\n\n    <paper-toast text=\"Hello world!\" opened></paper-toast>\n\nAlso `open()` or `show()` can be used to show the toast:\n\nExample:\n\n    <paper-button on-click=\"openToast\">Open Toast</paper-button>\n    <paper-toast id=\"toast\" text=\"Hello world!\"></paper-toast>\n\n    ...\n\n    openToast: function() {\n      this.$.toast.open();\n    }\n\nSet `duration` to 0, a negative number or Infinity to persist the toast on screen:\n\nExample:\n\n    <paper-toast text=\"Terms and conditions\" opened duration=\"0\">\n      <a href=\"#\">Show more</a>\n    </paper-toast>\n\n\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-toast-background-color` | The paper-toast background-color | `#323232`\n`--paper-toast-color` | The paper-toast color | `#f1f1f1`\n\nThis element applies the mixin `--paper-font-common-base` but does not import `paper-styles/typography.html`.\nIn order to apply the `Roboto` font to this element, make sure you've imported `paper-styles/typography.html`.\n\n@group Paper Elements\n@element paper-toast\n@demo demo/index.html\n@hero hero.svg\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport { Base } from '@polymer/polymer/polymer-legacy.js';\n\nimport { IronA11yAnnouncer } from '@polymer/iron-a11y-announcer/iron-a11y-announcer.js';\nimport { IronOverlayBehavior, IronOverlayBehaviorImpl } from '@polymer/iron-overlay-behavior/iron-overlay-behavior.js';\nimport { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\n\n// Keeps track of the toast currently opened.\nvar currentToast = null;\n\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        position: fixed;\n        background-color: var(--paper-toast-background-color, #323232);\n        color: var(--paper-toast-color, #f1f1f1);\n        min-height: 48px;\n        min-width: 288px;\n        padding: 16px 24px;\n        box-sizing: border-box;\n        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\n        border-radius: 2px;\n        margin: 12px;\n        font-size: 14px;\n        cursor: default;\n        -webkit-transition: -webkit-transform 0.3s, opacity 0.3s;\n        transition: transform 0.3s, opacity 0.3s;\n        opacity: 0;\n        -webkit-transform: translateY(100px);\n        transform: translateY(100px);\n        @apply --paper-font-common-base;\n      }\n\n      :host(.capsule) {\n        border-radius: 24px;\n      }\n\n      :host(.fit-bottom) {\n        width: 100%;\n        min-width: 0;\n        border-radius: 0;\n        margin: 0;\n      }\n\n      :host(.paper-toast-open) {\n        opacity: 1;\n        -webkit-transform: translateY(0px);\n        transform: translateY(0px);\n      }\n    </style>\n\n    <span id=\"label\">{{text}}</span>\n    <slot></slot>\n`,\n\n  is: 'paper-toast',\n  behaviors: [IronOverlayBehavior],\n\n  properties: {\n    /**\n     * The element to fit `this` into.\n     * Overridden from `Polymer.IronFitBehavior`.\n     */\n    fitInto: {type: Object, value: window, observer: '_onFitIntoChanged'},\n\n    /**\n     * The orientation against which to align the dropdown content\n     * horizontally relative to `positionTarget`.\n     * Overridden from `Polymer.IronFitBehavior`.\n     */\n    horizontalAlign: {type: String, value: 'left'},\n\n    /**\n     * The orientation against which to align the dropdown content\n     * vertically relative to `positionTarget`.\n     * Overridden from `Polymer.IronFitBehavior`.\n     */\n    verticalAlign: {type: String, value: 'bottom'},\n\n    /**\n     * The duration in milliseconds to show the toast.\n     * Set to `0`, a negative number, or `Infinity`, to disable the\n     * toast auto-closing.\n     */\n    duration: {type: Number, value: 3000},\n\n    /**\n     * The text to display in the toast.\n     */\n    text: {type: String, value: ''},\n\n    /**\n     * Overridden from `IronOverlayBehavior`.\n     * Set to false to enable closing of the toast by clicking outside it.\n     */\n    noCancelOnOutsideClick: {type: Boolean, value: true},\n\n    /**\n     * Overridden from `IronOverlayBehavior`.\n     * Set to true to disable auto-focusing the toast or child nodes with\n     * the `autofocus` attribute` when the overlay is opened.\n     */\n    noAutoFocus: {type: Boolean, value: true}\n  },\n\n  listeners: {'transitionend': '__onTransitionEnd'},\n\n  /**\n   * Read-only. Deprecated. Use `opened` from `IronOverlayBehavior`.\n   * @property visible\n   * @deprecated\n   */\n  get visible() {\n    Base._warn('`visible` is deprecated, use `opened` instead');\n    return this.opened;\n  },\n\n  /**\n   * Read-only. Can auto-close if duration is a positive finite number.\n   * @property _canAutoClose\n   */\n  get _canAutoClose() {\n    return this.duration > 0 && this.duration !== Infinity;\n  },\n\n  created: function() {\n    this._autoClose = null;\n    IronA11yAnnouncer.requestAvailability();\n  },\n\n  /**\n   * Show the toast. Without arguments, this is the same as `open()` from\n   * `IronOverlayBehavior`.\n   * @param {(Object|string)=} properties Properties to be set before opening the toast.\n   * e.g. `toast.show('hello')` or `toast.show({text: 'hello', duration: 3000})`\n   */\n  show: function(properties) {\n    if (typeof properties == 'string') {\n      properties = {text: properties};\n    }\n    for (var property in properties) {\n      if (property.indexOf('_') === 0) {\n        Base._warn(\n            'The property \"' + property + '\" is private and was not set.');\n      } else if (property in this) {\n        this[property] = properties[property];\n      } else {\n        Base._warn('The property \"' + property + '\" is not valid.');\n      }\n    }\n    this.open();\n  },\n\n  /**\n   * Hide the toast. Same as `close()` from `IronOverlayBehavior`.\n   */\n  hide: function() {\n    this.close();\n  },\n\n  /**\n   * Called on transitions of the toast, indicating a finished animation\n   * @private\n   */\n  __onTransitionEnd: function(e) {\n    // there are different transitions that are happening when opening and\n    // closing the toast. The last one so far is for `opacity`.\n    // This marks the end of the transition, so we check for this to determine\n    // if this is the correct event.\n    if (e && e.target === this && e.propertyName === 'opacity') {\n      if (this.opened) {\n        this._finishRenderOpened();\n      } else {\n        this._finishRenderClosed();\n      }\n    }\n  },\n\n  /**\n   * Overridden from `IronOverlayBehavior`.\n   * Called when the value of `opened` changes.\n   */\n  _openedChanged: function() {\n    if (this._autoClose !== null) {\n      this.cancelAsync(this._autoClose);\n      this._autoClose = null;\n    }\n    if (this.opened) {\n      if (currentToast && currentToast !== this) {\n        currentToast.close();\n      }\n      currentToast = this;\n      this.fire('iron-announce', {text: this.text});\n      if (this._canAutoClose) {\n        this._autoClose = this.async(this.close, this.duration);\n      }\n    } else if (currentToast === this) {\n      currentToast = null;\n    }\n    IronOverlayBehaviorImpl._openedChanged.apply(this, arguments);\n  },\n\n  /**\n   * Overridden from `IronOverlayBehavior`.\n   */\n  _renderOpened: function() {\n    this.classList.add('paper-toast-open');\n  },\n\n  /**\n   * Overridden from `IronOverlayBehavior`.\n   */\n  _renderClosed: function() {\n    this.classList.remove('paper-toast-open');\n  },\n\n  /**\n   * @private\n   */\n  _onFitIntoChanged: function(fitInto) {\n    this.positionTarget = fitInto;\n  }\n\n  /**\n   * Fired when `paper-toast` is opened.\n   *\n   * @event 'iron-announce'\n   * @param {{text: string}} detail Contains text that will be announced.\n   */\n});\n","import '@polymer/paper-toast/paper-toast.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport LocalizeMixin from '../mixins/localize-mixin.js';\n\nclass NotificationManager extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n    <style>\n      paper-toast {\n        z-index: 1;\n      }\n    </style>\n\n    <paper-toast id=\"toast\" text=\"[[_text]]\" no-cancel-on-outside-click=\"[[_cancelOnOutsideClick]]\"></paper-toast>\n    <paper-toast id=\"connToast\" duration=\"0\" text=\"[[localize('ui.notification_toast.connection_lost')]]\" opened=\"[[connectionLost]]\"></paper-toast>\n`;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n        observer: 'hassChanged',\n      },\n\n      wasConnected: {\n        type: Boolean,\n        value: false,\n      },\n\n      connectionLost: {\n        type: Boolean,\n        computed: 'computeConnectionLost(wasConnected, hass)',\n      },\n\n      _cancelOnOutsideClick: {\n        type: Boolean,\n        value: false,\n      },\n\n      _text: {\n        type: String,\n        readOnly: true,\n      },\n\n      toastClass: {\n        type: String,\n        value: '',\n      },\n    };\n  }\n\n  hassChanged(hass) {\n    if (hass && hass.connected) {\n      // Once the connetion is established, set wasConnected to true\n      this.wasConnected = true;\n    }\n    if (!hass || !hass.connection) {\n      // If the users logs out, reset wasConnected\n      this.wasConnected = false;\n    }\n  }\n\n  computeConnectionLost(wasConnected, hass) {\n    return wasConnected && hass && !hass.connected;\n  }\n\n  constructor() {\n    super();\n    this.handleWindowChange = this.handleWindowChange.bind(this);\n    this._mediaq = window.matchMedia('(max-width: 599px)');\n    this._mediaq.addListener(this.handleWindowChange);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.handleWindowChange(this._mediaq);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this._mediaq.removeListener(this.handleWindowChange);\n  }\n\n  handleWindowChange(ev) {\n    this.$.toast.classList.toggle('fit-bottom', ev.matches);\n    this.$.connToast.classList.toggle('fit-bottom', ev.matches);\n  }\n\n  showNotification(message) {\n    this._set_text(message);\n    this.$.toast.show();\n  }\n}\n\ncustomElements.define('notification-manager', NotificationManager);\n"],"sourceRoot":""}