{"version":3,"sources":["webpack:///./node_modules/@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js","webpack:///./node_modules/@polymer/paper-input/paper-textarea.js","webpack:///./src/panels/dev-template/ha-panel-dev-template.js"],"names":["Object","polymer_fn","a","_template","html_tag","is","behaviors","iron_validatable_behavior","iron_control_state","properties","value","observer","type","String","notify","bindValue","rows","Number","maxRows","autocomplete","autofocus","Boolean","inputmode","placeholder","readonly","required","minlength","maxlength","label","listeners","input","textarea","this","$","selectionStart","selectionEnd","attached","navigator","userAgent","match","style","marginLeft","validate","valid","validity","hasValidator","call","invalid","fire","_bindValueChanged","_valueChanged","mirror","innerHTML","_valueForMirror","_onInput","event","eventPath","polymer_dom","b","path","target","_constrain","tokens","_tokens","length","slice","push","join","replace","split","_updateCached","paper_input_behavior","iron_form_element_behavior","_ariaLabelledBy","_ariaDescribedBy","start","end","_ariaLabelledByChanged","ariaLabelledBy","_focusableElement","setAttribute","_ariaDescribedByChanged","ariaDescribedBy","inputElement","customElements","define","_polymer_polymer_polymer_element_js__WEBPACK_IMPORTED_MODULE_8__","template","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_7__","hass","narrow","showMenu","error","rendering","processed","computeFormClasses","computeRenderedClasses","templateChanged","_debouncer","_polymer_polymer_lib_utils_debounce_js__WEBPACK_IMPORTED_MODULE_6__","debounce","_polymer_polymer_lib_utils_async_js__WEBPACK_IMPORTED_MODULE_5__","timeOut","after","renderTemplate","callApi","then","bind","body","message"],"mappings":";iJA4CAA,OAAAC,EAAAC,EAAAF,EACEG,UAAWC,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmEXC,GAAI,yBACJC,WAAYC,EAAAL,EAAyBM,EAAAN,GAErCO,YAKEC,OAAQC,SAAU,gBAAiBC,KAAMC,OAAQC,WAOjDC,WAAYJ,SAAU,oBAAqBC,KAAMC,OAAQC,WASzDE,MAAOJ,KAAMK,OAAQP,MAAO,EAAGC,SAAU,iBAUzCO,SAAUN,KAAMK,OAAQP,MAAO,EAAGC,SAAU,iBAK5CQ,cAAeP,KAAMC,OAAQH,MAAO,OAKpCU,WAAYR,KAAMS,QAASX,UAK3BY,WAAYV,KAAMC,QAKlBU,aAAcX,KAAMC,QAKpBW,UAAWZ,KAAMC,QAKjBY,UAAWb,KAAMS,SAKjBK,WAAYd,KAAMK,QAKlBU,WAAYf,KAAMK,QAKlBW,OAAQhB,KAAMC,SAIhBgB,WAAYC,MAAS,YAMrBC,eACE,OAAOC,KAAKC,EAAEF,UAOhBG,qBACE,OAAOF,KAAKC,EAAEF,SAASG,gBAOzBC,mBACE,OAAOH,KAAKC,EAAEF,SAASI,cAMzBD,mBAAmBxB,GACjBsB,KAAKC,EAAEF,SAASG,eAAiBxB,GAMnCyB,iBAAiBzB,GACfsB,KAAKC,EAAEF,SAASI,aAAezB,GAGjC0B,SAAU,WAMKC,UAAUC,UAAUC,MAAM,sBAErCP,KAAKC,EAAEF,SAASS,MAAMC,WAAa,SAUvCC,SAAU,WAER,IAAIC,EAAQX,KAAKC,EAAEF,SAASa,SAASD,MAcrC,OAXIA,IAEEX,KAAKP,UAA2B,KAAfO,KAAKtB,MACxBiC,KACSX,KAAKa,iBACdF,EAAQpC,EAAAL,EAAwBwC,SAASI,KAAKd,KAAMA,KAAKtB,SAI7DsB,KAAKe,SAAWJ,EAChBX,KAAKgB,KAAK,uBACHL,GAGTM,kBAAmB,SAASlC,GAC1BiB,KAAKtB,MAAQK,GAGfmC,cAAe,SAASxC,GACtB,IAAIqB,EAAWC,KAAKD,SACfA,IAQDA,EAASrB,QAAUA,IACrBqB,EAASrB,MAAUA,GAAmB,IAAVA,EAAoBA,EAAL,IAG7CsB,KAAKjB,UAAYL,EACjBsB,KAAKC,EAAEkB,OAAOC,UAAYpB,KAAKqB,kBAI/BrB,KAAKgB,KAAK,sBAAuBtC,MAAOsB,KAAKjB,cAG/CuC,SAAU,SAASC,GACjB,IAAIC,EAAYxD,OAAAyD,EAAAC,EAAA1D,CAAIuD,GAAOI,KAC3B3B,KAAKtB,MAAQ8C,EAAYA,EAAU,GAAG9C,MAAQ6C,EAAMK,OAAOlD,OAG7DmD,WAAY,SAASC,GACnB,IAAIC,EASJ,IARAD,EAASA,IAAW,IAIlBC,EADE/B,KAAKd,QAAU,GAAK4C,EAAOE,OAAShC,KAAKd,QACjC4C,EAAOG,MAAM,EAAGjC,KAAKd,SAErB4C,EAAOG,MAAM,GAElBjC,KAAKhB,KAAO,GAAK+C,EAAQC,OAAShC,KAAKhB,MAC5C+C,EAAQG,KAAK,IAGf,OAAOH,EAAQI,KAAK,SAAW,UAGjCd,gBAAiB,WACf,IAAIvB,EAAQE,KAAKD,SACjB,GAAKD,EAUL,OAPAE,KAAK8B,OAAUhC,GAASA,EAAMpB,MAASoB,EAAMpB,MAAM0D,QAAQ,MAAO,SACtBA,QAAQ,MAAO,UACfA,QAAQ,MAAO,SACfA,QAAQ,MAAO,QACfA,QAAQ,MAAO,QACfC,MAAM,OACV,IACjCrC,KAAK6B,WAAW7B,KAAK8B,SAG9BQ,cAAe,WACbtC,KAAKC,EAAEkB,OAAOC,UAAYpB,KAAK6B,WAAW7B,KAAK8B,oDCxSnD9D,OAAAC,EAAAC,EAAAF,EACEG,UAAWC,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgCXC,GAAI,iBAEJC,WACEiE,EAAArE,EACAsE,EAAAtE,GAGFO,YACEgE,iBACE9D,SAAU,yBACVC,KAAMC,QAGR6D,kBACE/D,SAAU,0BACVC,KAAMC,QAURG,MACEJ,KAAMK,OACNP,MAAO,GAWTQ,SACEN,KAAMK,OACNP,MAAO,IAOXwB,qBACE,OAAOF,KAAKC,EAAEH,MAAMC,SAASG,gBAG/BA,mBAAmByC,GACjB3C,KAAKC,EAAEH,MAAMC,SAASG,eAAiByC,GAMzCxC,mBACE,OAAOH,KAAKC,EAAEH,MAAMC,SAASI,cAG/BA,iBAAiByC,GACf5C,KAAKC,EAAEH,MAAMC,SAASI,aAAeyC,GAGvCC,uBAAwB,SAASC,GAC/B9C,KAAK+C,kBAAkBC,aAAa,kBAAmBF,IAGzDG,wBAAyB,SAASC,GAChClD,KAAK+C,kBAAkBC,aAAa,mBAAoBE,IAG1DH,wBACE,OAAO/C,KAAKmD,aAAapD,uICiD7BqD,eAAeC,OAAO,sCAxLWC,EAAApF,EAC/BqF,sBACE,OAAOC,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsFT/E,wBACE,OACEgF,MACE7E,KAAMZ,QAGR0F,QACE9E,KAAMS,QACNX,UAGFiF,UACE/E,KAAMS,QACNX,UAGFkF,OACEhF,KAAMS,QACNX,UAGFmF,WACEjF,KAAMS,QACNX,UAGF6E,UACE3E,KAAMC,OAENH,MAAQ,8qBAsBRC,SAAU,mBAGZmF,WACElF,KAAMC,OACNH,MAAO,KAKbqF,mBAAmBL,GACjB,OAAOA,EACL,cAAgB,gCAGpBM,uBAAuBJ,GACrB,OAAOA,EAAQ,iBAAmB,WAGpCK,kBACMjE,KAAK4D,QACP5D,KAAK4D,UAEP5D,KAAKkE,WAAaC,EAAAjG,EAAUkG,SAC1BpE,KAAKkE,WACLG,EAAAC,QAAQC,MAAM,KACd,KAAQvE,KAAKwE,mBAIjBA,iBACExE,KAAK6D,aAEL7D,KAAKyD,KAAKgB,QAAQ,OAAQ,YAAclB,SAAUvD,KAAKuD,WACpDmB,KAAK,SAAUZ,GACd9D,KAAK8D,UAAYA,EACjB9D,KAAK6D,cACLc,KAAK3E,MAAO,SAAU4D,GACtB5D,KAAK8D,UAAYF,EAAMgB,KAAKC,QAC5B7E,KAAK4D,SACL5D,KAAK6D,cACLc,KAAK3E","file":"dd846994e391cbf8e042.chunk.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/**\n`iron-autogrow-textarea` is an element containing a textarea that grows in height as more\nlines of input are entered. Unless an explicit height or the `maxRows` property is set, it will\nnever scroll.\n\nExample:\n\n    <iron-autogrow-textarea></iron-autogrow-textarea>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-autogrow-textarea` | Mixin applied to the textarea | `{}`\n`--iron-autogrow-textarea-placeholder` | Mixin applied to the textarea placeholder | `{}`\n\n@group Iron Elements\n@hero hero.svg\n@demo demo/index.html\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport { IronControlState } from '@polymer/iron-behaviors/iron-control-state.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport { IronValidatableBehavior } from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { dom } from '@polymer/polymer/lib/legacy/polymer.dom.js';\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: relative;\n        width: 400px;\n        border: 1px solid;\n        padding: 2px;\n        -moz-appearance: textarea;\n        -webkit-appearance: textarea;\n        overflow: hidden;\n      }\n\n      .mirror-text {\n        visibility: hidden;\n        word-wrap: break-word;\n        @apply --iron-autogrow-textarea;\n      }\n\n      .fit {\n        @apply --layout-fit;\n      }\n\n      textarea {\n        position: relative;\n        outline: none;\n        border: none;\n        resize: none;\n        background: inherit;\n        color: inherit;\n        /* see comments in template */\n        width: 100%;\n        height: 100%;\n        font-size: inherit;\n        font-family: inherit;\n        line-height: inherit;\n        text-align: inherit;\n        @apply --iron-autogrow-textarea;\n      }\n\n      textarea::-webkit-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea::-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-ms-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n    </style>\n\n    <!-- the mirror sizes the input/textarea so it grows with typing -->\n    <!-- use &#160; instead &nbsp; of to allow this element to be used in XHTML -->\n    <div id=\"mirror\" class=\"mirror-text\" aria-hidden=\"true\">&nbsp;</div>\n\n    <!-- size the input/textarea with a div, because the textarea has intrinsic size in ff -->\n    <div class=\"textarea-container fit\">\n      <textarea id=\"textarea\" name\\$=\"[[name]]\" aria-label\\$=\"[[label]]\" autocomplete\\$=\"[[autocomplete]]\" autofocus\\$=\"[[autofocus]]\" inputmode\\$=\"[[inputmode]]\" placeholder\\$=\"[[placeholder]]\" readonly\\$=\"[[readonly]]\" required\\$=\"[[required]]\" disabled\\$=\"[[disabled]]\" rows\\$=\"[[rows]]\" minlength\\$=\"[[minlength]]\" maxlength\\$=\"[[maxlength]]\"></textarea>\n    </div>\n`,\n\n  is: 'iron-autogrow-textarea',\n  behaviors: [IronValidatableBehavior, IronControlState],\n\n  properties: {\n    /**\n     * Use this property instead of `bind-value` for two-way data binding.\n     * @type {string|number}\n     */\n    value: {observer: '_valueChanged', type: String, notify: true},\n\n    /**\n     * This property is deprecated, and just mirrors `value`. Use `value`\n     * instead.\n     * @type {string|number}\n     */\n    bindValue: {observer: '_bindValueChanged', type: String, notify: true},\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type number\n     * @default 1\n     */\n    rows: {type: Number, value: 1, observer: '_updateCached'},\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type number\n     * @default 0\n     */\n    maxRows: {type: Number, value: 0, observer: '_updateCached'},\n\n    /**\n     * Bound to the textarea's `autocomplete` attribute.\n     */\n    autocomplete: {type: String, value: 'off'},\n\n    /**\n     * Bound to the textarea's `autofocus` attribute.\n     */\n    autofocus: {type: Boolean, value: false},\n\n    /**\n     * Bound to the textarea's `inputmode` attribute.\n     */\n    inputmode: {type: String},\n\n    /**\n     * Bound to the textarea's `placeholder` attribute.\n     */\n    placeholder: {type: String},\n\n    /**\n     * Bound to the textarea's `readonly` attribute.\n     */\n    readonly: {type: String},\n\n    /**\n     * Set to true to mark the textarea as required.\n     */\n    required: {type: Boolean},\n\n    /**\n     * The minimum length of the input value.\n     */\n    minlength: {type: Number},\n\n    /**\n     * The maximum length of the input value.\n     */\n    maxlength: {type: Number},\n\n    /**\n     * Bound to the textarea's `aria-label` attribute.\n     */\n    label: {type: String}\n\n  },\n\n  listeners: {'input': '_onInput'},\n\n  /**\n   * Returns the underlying textarea.\n   * @return {!HTMLTextAreaElement}\n   */\n  get textarea() {\n    return this.$.textarea;\n  },\n\n  /**\n   * Returns textarea's selection start.\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.textarea.selectionStart;\n  },\n\n  /**\n   * Returns textarea's selection end.\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.textarea.selectionEnd;\n  },\n\n  /**\n   * Sets the textarea's selection start.\n   */\n  set selectionStart(value) {\n    this.$.textarea.selectionStart = value;\n  },\n\n  /**\n   * Sets the textarea's selection end.\n   */\n  set selectionEnd(value) {\n    this.$.textarea.selectionEnd = value;\n  },\n\n  attached: function() {\n    /* iOS has an arbitrary left margin of 3px that isn't present\n     * in any other browser, and means that the paper-textarea's cursor\n     * overlaps the label.\n     * See https://github.com/PolymerElements/paper-input/issues/468.\n     */\n    var IS_IOS = navigator.userAgent.match(/iP(?:[oa]d|hone)/);\n    if (IS_IOS) {\n      this.$.textarea.style.marginLeft = '-3px';\n    }\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, if it exists; otherwise, the `textarea`'s validity\n   * is used.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    // Use the nested input's native validity.\n    var valid = this.$.textarea.validity.valid;\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.value === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.value);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _bindValueChanged: function(bindValue) {\n    this.value = bindValue;\n  },\n\n  _valueChanged: function(value) {\n    var textarea = this.textarea;\n    if (!textarea) {\n      return;\n    }\n\n    // If the bindValue changed manually, then we need to also update\n    // the underlying textarea's value. Otherwise this change was probably\n    // generated from the _onInput handler, and the two values are already\n    // the same.\n    if (textarea.value !== value) {\n      textarea.value = !(value || value === 0) ? '' : value;\n    }\n\n    this.bindValue = value;\n    this.$.mirror.innerHTML = this._valueForMirror();\n\n    // Manually notify because we don't want to notify until after setting\n    // value.\n    this.fire('bind-value-changed', {value: this.bindValue});\n  },\n\n  _onInput: function(event) {\n    var eventPath = dom(event).path;\n    this.value = eventPath ? eventPath[0].value : event.target.value;\n  },\n\n  _constrain: function(tokens) {\n    var _tokens;\n    tokens = tokens || [''];\n    // Enforce the min and max heights for a multiline input to avoid\n    // measurement\n    if (this.maxRows > 0 && tokens.length > this.maxRows) {\n      _tokens = tokens.slice(0, this.maxRows);\n    } else {\n      _tokens = tokens.slice(0);\n    }\n    while (this.rows > 0 && _tokens.length < this.rows) {\n      _tokens.push('');\n    }\n    // Use &#160; instead &nbsp; of to allow this element to be used in XHTML.\n    return _tokens.join('<br/>') + '&#160;';\n  },\n\n  _valueForMirror: function() {\n    var input = this.textarea;\n    if (!input) {\n      return;\n    }\n    this.tokens = (input && input.value) ? input.value.replace(/&/gm, '&amp;')\n                                               .replace(/\"/gm, '&quot;')\n                                               .replace(/'/gm, '&#39;')\n                                               .replace(/</gm, '&lt;')\n                                               .replace(/>/gm, '&gt;')\n                                               .split('\\n') :\n                                           [''];\n    return this._constrain(this.tokens);\n  },\n\n  _updateCached: function() {\n    this.$.mirror.innerHTML = this._constrain(this.tokens);\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n`<paper-textarea>` is a multi-line text field with Material Design styling.\n\n    <paper-textarea label=\"Textarea label\"></paper-textarea>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js';\nimport { IronFormElementBehavior } from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport { PaperInputBehavior } from './paper-input-behavior.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\nimport { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container no-label-float\\$=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate\\$=\"[[autoValidate]]\" disabled\\$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <label hidden\\$=\"[[!label]]\" aria-hidden=\"true\" for\\$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <iron-autogrow-textarea class=\"paper-input-input\" slot=\"input\" id\\$=\"[[_inputId]]\" aria-labelledby\\$=\"[[_ariaLabelledBy]]\" aria-describedby\\$=\"[[_ariaDescribedBy]]\" bind-value=\"{{value}}\" invalid=\"{{invalid}}\" validator\\$=\"[[validator]]\" disabled\\$=\"[[disabled]]\" autocomplete\\$=\"[[autocomplete]]\" autofocus\\$=\"[[autofocus]]\" inputmode\\$=\"[[inputmode]]\" name\\$=\"[[name]]\" placeholder\\$=\"[[placeholder]]\" readonly\\$=\"[[readonly]]\" required\\$=\"[[required]]\" minlength\\$=\"[[minlength]]\" maxlength\\$=\"[[maxlength]]\" autocapitalize\\$=\"[[autocapitalize]]\" rows\\$=\"[[rows]]\" max-rows\\$=\"[[maxRows]]\" on-change=\"_onChange\"></iron-autogrow-textarea>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n`,\n\n  is: 'paper-textarea',\n\n  behaviors: [\n    PaperInputBehavior,\n    IronFormElementBehavior,\n  ],\n\n  properties: {\n    _ariaLabelledBy: {\n      observer: '_ariaLabelledByChanged',\n      type: String,\n    },\n\n    _ariaDescribedBy: {\n      observer: '_ariaDescribedByChanged',\n      type: String,\n    },\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type number\n     * @default 1\n     */\n    rows: {\n      type: Number,\n      value: 1,\n    },\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type number\n     * @default 0\n     */\n    maxRows: {\n      type: Number,\n      value: 0,\n    },\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.input.textarea.selectionStart;\n  },\n\n  set selectionStart(start) {\n    this.$.input.textarea.selectionStart = start;\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.input.textarea.selectionEnd;\n  },\n\n  set selectionEnd(end) {\n    this.$.input.textarea.selectionEnd = end;\n  },\n\n  _ariaLabelledByChanged: function(ariaLabelledBy) {\n    this._focusableElement.setAttribute('aria-labelledby', ariaLabelledBy);\n  },\n\n  _ariaDescribedByChanged: function(ariaDescribedBy) {\n    this._focusableElement.setAttribute('aria-describedby', ariaDescribedBy);\n  },\n\n  get _focusableElement() {\n    return this.inputElement.textarea;\n  }\n});\n","import '@polymer/app-layout/app-header-layout/app-header-layout.js';\nimport '@polymer/app-layout/app-header/app-header.js';\nimport '@polymer/app-layout/app-toolbar/app-toolbar.js';\nimport '@polymer/paper-input/paper-textarea.js';\nimport '@polymer/paper-spinner/paper-spinner.js';\nimport { timeOut } from '@polymer/polymer/lib/utils/async.js';\nimport { Debouncer } from '@polymer/polymer/lib/utils/debounce.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport '../../components/ha-menu-button.js';\nimport '../../resources/ha-style.js';\n\nclass HaPanelDevTemplate extends PolymerElement {\n  static get template() {\n    return html`\n    <style include=\"ha-style iron-flex iron-positioning\"></style>\n    <style>\n      :host {\n        -ms-user-select: initial;\n        -webkit-user-select: initial;\n        -moz-user-select: initial;\n      }\n\n      .content {\n        padding: 16px;\n      }\n\n      .edit-pane {\n        margin-right: 16px;\n      }\n\n      .edit-pane a {\n        color: var(--dark-primary-color);\n      }\n\n      .horizontal .edit-pane {\n        max-width: 50%;\n      }\n\n      .render-pane {\n        position: relative;\n        max-width: 50%;\n      }\n\n      .render-spinner {\n        position: absolute;\n        top: 8px;\n        right: 8px;\n      }\n\n      paper-textarea {\n        --paper-input-container-input: {\n          @apply --paper-font-code1;\n        }\n      }\n\n      .rendered {\n        @apply --paper-font-code1;\n        clear: both;\n        white-space: pre-wrap;\n      }\n\n      .rendered.error {\n        color: red;\n      }\n    </style>\n\n    <app-header-layout has-scrolling-region>\n      <app-header slot=\"header\" fixed>\n        <app-toolbar>\n          <ha-menu-button narrow='[[narrow]]' show-menu='[[showMenu]]'></ha-menu-button>\n          <div main-title>Templates</div>\n        </app-toolbar>\n      </app-header>\n\n      <div class$='[[computeFormClasses(narrow)]]'>\n        <div class='edit-pane'>\n          <p>\n            Templates are rendered using the Jinja2 template engine with some Home Assistant specific extensions.\n          </p>\n          <ul>\n            <li><a href='http://jinja.pocoo.org/docs/dev/templates/' target='_blank'>Jinja2 template documentation</a></li>\n            <li><a href='https://home-assistant.io/docs/configuration/templating/' target='_blank'>Home Assistant template extensions</a></li>\n          </ul>\n          <paper-textarea\n            label=\"Template editor\"\n            value='{{template}}'\n            autofocus\n          ></paper-textarea>\n        </div>\n\n        <div class='render-pane'>\n          <paper-spinner class='render-spinner' active='[[rendering]]'></paper-spinner>\n          <pre class$='[[computeRenderedClasses(error)]]'>[[processed]]</pre>\n        </div>\n      </div>\n    </app-header-layout>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      narrow: {\n        type: Boolean,\n        value: false,\n      },\n\n      showMenu: {\n        type: Boolean,\n        value: false,\n      },\n\n      error: {\n        type: Boolean,\n        value: false,\n      },\n\n      rendering: {\n        type: Boolean,\n        value: false,\n      },\n\n      template: {\n        type: String,\n        /* eslint-disable max-len */\n        value: `Imitate available variables:\n{% set my_test_json = {\n  \"temperature\": 25,\n  \"unit\": \"°C\"\n} %}\n\nThe temperature is {{ my_test_json.temperature }} {{ my_test_json.unit }}.\n\n{% if is_state(\"device_tracker.paulus\", \"home\") and\n      is_state(\"device_tracker.anne_therese\", \"home\") -%}\n  You are both home, you silly\n{%- else -%}\n  Anne Therese is at {{ states(\"device_tracker.anne_therese\") }}\n  Paulus is at {{ states(\"device_tracker.paulus\") }}\n{%- endif %}\n\nFor loop example:\n{% for state in states.sensor -%}\n  {%- if loop.first %}The {% elif loop.last %} and the {% else %}, the {% endif -%}\n  {{ state.name | lower }} is {{state.state_with_unit}}\n{%- endfor %}.`,\n        /* eslint-enable max-len */\n        observer: 'templateChanged',\n      },\n\n      processed: {\n        type: String,\n        value: '',\n      },\n    };\n  }\n\n  computeFormClasses(narrow) {\n    return narrow ?\n      'content fit' : 'content fit layout horizontal';\n  }\n\n  computeRenderedClasses(error) {\n    return error ? 'error rendered' : 'rendered';\n  }\n\n  templateChanged() {\n    if (this.error) {\n      this.error = false;\n    }\n    this._debouncer = Debouncer.debounce(\n      this._debouncer,\n      timeOut.after(500),\n      () => { this.renderTemplate(); }\n    );\n  }\n\n  renderTemplate() {\n    this.rendering = true;\n\n    this.hass.callApi('POST', 'template', { template: this.template })\n      .then(function (processed) {\n        this.processed = processed;\n        this.rendering = false;\n      }.bind(this), function (error) {\n        this.processed = error.body.message;\n        this.error = true;\n        this.rendering = false;\n      }.bind(this));\n  }\n}\n\ncustomElements.define('ha-panel-dev-template', HaPanelDevTemplate);\n"],"sourceRoot":""}