{"version":3,"sources":["webpack:///./node_modules/@polymer/paper-checkbox/paper-checkbox.js","webpack:///./src/layouts/login-form.js"],"names":["_polymer_paper_behaviors_paper_inky_focus_behavior_js__WEBPACK_IMPORTED_MODULE_5__","__webpack_require__","$_documentContainer","document","createElement","setAttribute","innerHTML","head","appendChild","content","Object","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_3__","a","is","behaviors","_polymer_paper_behaviors_paper_checked_element_behavior_js__WEBPACK_IMPORTED_MODULE_2__","hostAttributes","role","aria-checked","tabindex","properties","ariaActiveAttribute","type","String","value","attached","_polymer_polymer_lib_utils_render_status_js__WEBPACK_IMPORTED_MODULE_4__","this","getComputedStyleValue","trim","checkboxSizeText","units","unitsMatches","match","checkboxSize","parseFloat","defaultInkSize","Math","floor","updateStyles","--paper-checkbox-ink-size","_computeCheckboxClass","checked","invalid","className","_computeCheckmarkClass","_createRipple","_rippleContainer","$","checkboxContainer","b","call","customElements","define","_mixins_localize_mixin_js__WEBPACK_IMPORTED_MODULE_8__","_polymer_polymer_polymer_element_js__WEBPACK_IMPORTED_MODULE_6__","template","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_5__","hass","connectionPromise","notify","observer","errorMessage","isValidating","Boolean","showLoading","showSpinner","computed","password","ready","super","addEventListener","ev","passwordKeyDown","connectedCallback","window","removeInitMsg","computeLoadingMsg","computeShowSpinner","forceShowLoading","isValidatingChanged","newVal","setTimeout","passwordInput","inputElement","focus","keyCode","validatePassword","preventDefault","auth","hideKeyboardOnFocus","createHassConnection","rememberLogin","then","localStorage","authToken","handleConnectionPromiseChanged","el","errCode","home_assistant_js_websocket__WEBPACK_IMPORTED_MODULE_7__"],"mappings":"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","file":"260c6283eb577f96b306.chunk.js","sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/**\nMaterial design: [Checkbox](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-checkbox)\n\n`paper-checkbox` is a button that can be either checked or unchecked.  User\ncan tap the checkbox to check or uncheck it.  Usually you use checkboxes\nto allow user to select multiple options from a set.  If you have a single\nON/OFF option, avoid using a single checkbox and use `paper-toggle-button`\ninstead.\n\nExample:\n\n    <paper-checkbox>label</paper-checkbox>\n\n    <paper-checkbox checked> label</paper-checkbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-checkbox-unchecked-background-color` | Checkbox background color when the input is not checked | `transparent`\n`--paper-checkbox-unchecked-color` | Checkbox border color when the input is not checked | `--primary-text-color`\n`--paper-checkbox-unchecked-ink-color` | Selected/focus ripple color when the input is not checked | `--primary-text-color`\n`--paper-checkbox-checked-color` | Checkbox color when the input is checked | `--primary-color`\n`--paper-checkbox-checked-ink-color` | Selected/focus ripple color when the input is checked | `--primary-color`\n`--paper-checkbox-checkmark-color` | Checkmark color | `white`\n`--paper-checkbox-label-color` | Label color | `--primary-text-color`\n`--paper-checkbox-label-checked-color` | Label color when the input is checked | `--paper-checkbox-label-color`\n`--paper-checkbox-label-spacing` | Spacing between the label and the checkbox | `8px`\n`--paper-checkbox-label` | Mixin applied to the label | `{}`\n`--paper-checkbox-label-checked` | Mixin applied to the label when the input is checked | `{}`\n`--paper-checkbox-error-color` | Checkbox color when invalid | `--error-color`\n`--paper-checkbox-size` | Size of the checkbox | `18px`\n`--paper-checkbox-ink-size` | Size of the ripple | `48px`\n`--paper-checkbox-margin` | Margin around the checkbox container | `initial`\n`--paper-checkbox-vertical-align` | Vertical alignment of the checkbox container | `middle`\n\nThis element applies the mixin `--paper-font-common-base` but does not import `paper-styles/typography.html`.\nIn order to apply the `Roboto` font to this element, make sure you've imported `paper-styles/typography.html`.\n\n@demo demo/index.html\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/paper-styles/default-theme.js';\nimport { PaperCheckedElementBehavior } from '@polymer/paper-behaviors/paper-checked-element-behavior.js';\nimport { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport { afterNextRender } from '@polymer/polymer/lib/utils/render-status.js';\nimport { PaperInkyFocusBehaviorImpl } from '@polymer/paper-behaviors/paper-inky-focus-behavior.js';\nconst $_documentContainer = document.createElement('template');\n$_documentContainer.setAttribute('style', 'display: none;');\n\n$_documentContainer.innerHTML = `<dom-module id=\"paper-checkbox\">\n  <template strip-whitespace=\"\">\n    <style>\n      :host {\n        display: inline-block;\n        white-space: nowrap;\n        cursor: pointer;\n        --calculated-paper-checkbox-size: var(--paper-checkbox-size, 18px);\n        /* -1px is a sentinel for the default and is replaced in \\`attached\\`. */\n        --calculated-paper-checkbox-ink-size: var(--paper-checkbox-ink-size, -1px);\n        @apply --paper-font-common-base;\n        line-height: 0;\n        -webkit-tap-highlight-color: transparent;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      :host(:focus) {\n        outline: none;\n      }\n\n      .hidden {\n        display: none;\n      }\n\n      #checkboxContainer {\n        display: inline-block;\n        position: relative;\n        width: var(--calculated-paper-checkbox-size);\n        height: var(--calculated-paper-checkbox-size);\n        min-width: var(--calculated-paper-checkbox-size);\n        margin: var(--paper-checkbox-margin, initial);\n        vertical-align: var(--paper-checkbox-vertical-align, middle);\n        background-color: var(--paper-checkbox-unchecked-background-color, transparent);\n      }\n\n      #ink {\n        position: absolute;\n\n        /* Center the ripple in the checkbox by negative offsetting it by\n         * (inkWidth - rippleWidth) / 2 */\n        top: calc(0px - (var(--calculated-paper-checkbox-ink-size) - var(--calculated-paper-checkbox-size)) / 2);\n        left: calc(0px - (var(--calculated-paper-checkbox-ink-size) - var(--calculated-paper-checkbox-size)) / 2);\n        width: var(--calculated-paper-checkbox-ink-size);\n        height: var(--calculated-paper-checkbox-ink-size);\n        color: var(--paper-checkbox-unchecked-ink-color, var(--primary-text-color));\n        opacity: 0.6;\n        pointer-events: none;\n      }\n\n      #ink:dir(rtl) {\n        right: calc(0px - (var(--calculated-paper-checkbox-ink-size) - var(--calculated-paper-checkbox-size)) / 2);\n        left: auto;\n      }\n\n      #ink[checked] {\n        color: var(--paper-checkbox-checked-ink-color, var(--primary-color));\n      }\n\n      #checkbox {\n        position: relative;\n        box-sizing: border-box;\n        height: 100%;\n        border: solid 2px;\n        border-color: var(--paper-checkbox-unchecked-color, var(--primary-text-color));\n        border-radius: 2px;\n        pointer-events: none;\n        -webkit-transition: background-color 140ms, border-color 140ms;\n        transition: background-color 140ms, border-color 140ms;\n      }\n\n      /* checkbox checked animations */\n      #checkbox.checked #checkmark {\n        -webkit-animation: checkmark-expand 140ms ease-out forwards;\n        animation: checkmark-expand 140ms ease-out forwards;\n      }\n\n      @-webkit-keyframes checkmark-expand {\n        0% {\n          -webkit-transform: scale(0, 0) rotate(45deg);\n        }\n        100% {\n          -webkit-transform: scale(1, 1) rotate(45deg);\n        }\n      }\n\n      @keyframes checkmark-expand {\n        0% {\n          transform: scale(0, 0) rotate(45deg);\n        }\n        100% {\n          transform: scale(1, 1) rotate(45deg);\n        }\n      }\n\n      #checkbox.checked {\n        background-color: var(--paper-checkbox-checked-color, var(--primary-color));\n        border-color: var(--paper-checkbox-checked-color, var(--primary-color));\n      }\n\n      #checkmark {\n        position: absolute;\n        width: 36%;\n        height: 70%;\n        border-style: solid;\n        border-top: none;\n        border-left: none;\n        border-right-width: calc(2/15 * var(--calculated-paper-checkbox-size));\n        border-bottom-width: calc(2/15 * var(--calculated-paper-checkbox-size));\n        border-color: var(--paper-checkbox-checkmark-color, white);\n        -webkit-transform-origin: 97% 86%;\n        transform-origin: 97% 86%;\n        box-sizing: content-box; /* protect against page-level box-sizing */\n      }\n\n      #checkmark:dir(rtl) {\n        -webkit-transform-origin: 50% 14%;\n        transform-origin: 50% 14%;\n      }\n\n      /* label */\n      #checkboxLabel {\n        position: relative;\n        display: inline-block;\n        vertical-align: middle;\n        padding-left: var(--paper-checkbox-label-spacing, 8px);\n        white-space: normal;\n        line-height: normal;\n        color: var(--paper-checkbox-label-color, var(--primary-text-color));\n        @apply --paper-checkbox-label;\n      }\n\n      :host([checked]) #checkboxLabel {\n        color: var(--paper-checkbox-label-checked-color, var(--paper-checkbox-label-color, var(--primary-text-color)));\n        @apply --paper-checkbox-label-checked;\n      }\n\n      #checkboxLabel:dir(rtl) {\n        padding-right: var(--paper-checkbox-label-spacing, 8px);\n        padding-left: 0;\n      }\n\n      #checkboxLabel[hidden] {\n        display: none;\n      }\n\n      /* disabled state */\n\n      :host([disabled]) #checkbox {\n        opacity: 0.5;\n        border-color: var(--paper-checkbox-unchecked-color, var(--primary-text-color));\n      }\n\n      :host([disabled][checked]) #checkbox {\n        background-color: var(--paper-checkbox-unchecked-color, var(--primary-text-color));\n        opacity: 0.5;\n      }\n\n      :host([disabled]) #checkboxLabel  {\n        opacity: 0.65;\n      }\n\n      /* invalid state */\n      #checkbox.invalid:not(.checked) {\n        border-color: var(--paper-checkbox-error-color, var(--error-color));\n      }\n    </style>\n\n    <div id=\"checkboxContainer\">\n      <div id=\"checkbox\" class\\$=\"[[_computeCheckboxClass(checked, invalid)]]\">\n        <div id=\"checkmark\" class\\$=\"[[_computeCheckmarkClass(checked)]]\"></div>\n      </div>\n    </div>\n\n    <div id=\"checkboxLabel\"><slot></slot></div>\n  </template>\n\n  \n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer.content);\nPolymer({\n  is: 'paper-checkbox',\n\n  behaviors: [PaperCheckedElementBehavior],\n\n  /** @private */\n  hostAttributes: {role: 'checkbox', 'aria-checked': false, tabindex: 0},\n\n  properties: {\n    /**\n     * Fired when the checked state changes due to user interaction.\n     *\n     * @event change\n     */\n\n    /**\n     * Fired when the checked state changes.\n     *\n     * @event iron-change\n     */\n    ariaActiveAttribute: {type: String, value: 'aria-checked'}\n  },\n\n  attached: function() {\n    // Wait until styles have resolved to check for the default sentinel.\n    // See polymer#4009 for more details.\n    afterNextRender(this, function() {\n      var inkSize =\n          this.getComputedStyleValue('--calculated-paper-checkbox-ink-size')\n              .trim();\n      // If unset, compute and set the default `--paper-checkbox-ink-size`.\n      if (inkSize === '-1px') {\n        var checkboxSizeText =\n            this.getComputedStyleValue('--calculated-paper-checkbox-size')\n                .trim();\n\n        var units = 'px';\n        var unitsMatches = checkboxSizeText.match(/[A-Za-z]+$/);\n        if (unitsMatches !== null) {\n          units = unitsMatches[0];\n        }\n\n        var checkboxSize = parseFloat(checkboxSizeText);\n        var defaultInkSize = (8 / 3) * checkboxSize;\n\n        if (units === 'px') {\n          defaultInkSize = Math.floor(defaultInkSize);\n\n          // The checkbox and ripple need to have the same parity so that their\n          // centers align.\n          if (defaultInkSize % 2 !== checkboxSize % 2) {\n            defaultInkSize++;\n          }\n        }\n\n        this.updateStyles({\n          '--paper-checkbox-ink-size': defaultInkSize + units,\n        });\n      }\n    });\n  },\n\n  _computeCheckboxClass: function(checked, invalid) {\n    var className = '';\n    if (checked) {\n      className += 'checked ';\n    }\n    if (invalid) {\n      className += 'invalid';\n    }\n    return className;\n  },\n\n  _computeCheckmarkClass: function(checked) {\n    return checked ? '' : 'hidden';\n  },\n\n  // create ripple inside the checkboxContainer\n  _createRipple: function() {\n    this._rippleContainer = this.$.checkboxContainer;\n    return PaperInkyFocusBehaviorImpl._createRipple.call(this);\n  }\n\n});\n","import '@polymer/iron-flex-layout/iron-flex-layout-classes.js';\nimport '@polymer/paper-button/paper-button.js';\nimport '@polymer/paper-checkbox/paper-checkbox.js';\nimport '@polymer/paper-input/paper-input.js';\nimport '@polymer/paper-spinner/paper-spinner.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ERR_CANNOT_CONNECT, ERR_INVALID_AUTH } from 'home-assistant-js-websocket';\n\n\nimport LocalizeMixin from '../mixins/localize-mixin.js';\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass LoginForm extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n    <style include=\"iron-flex iron-positioning\"></style>\n    <style>\n      :host {\n        white-space: nowrap;\n      }\n\n      paper-input {\n        display: block;\n        margin-bottom: 16px;\n      }\n\n      paper-checkbox {\n        margin-right: 8px;\n      }\n\n      paper-button {\n        margin-left: 72px;\n      }\n\n      .interact {\n        height: 125px;\n      }\n\n      #validatebox {\n        margin-top: 16px;\n        text-align: center;\n      }\n\n      .validatemessage {\n        margin-top: 10px;\n      }\n    </style>\n\n    <div class=\"layout vertical center center-center fit\">\n      <img src=\"/static/icons/favicon-192x192.png\" height=\"192\">\n      <a href=\"#\" id=\"hideKeyboardOnFocus\"></a>\n      <div class=\"interact\">\n        <div id=\"loginform\" hidden\\$=\"[[showSpinner]]\">\n          <paper-input id=\"passwordInput\" label=\"[[localize('ui.login-form.password')]]\" type=\"password\" autofocus=\"\" invalid=\"[[errorMessage]]\" error-message=\"[[errorMessage]]\" value=\"{{password}}\"></paper-input>\n          <div class=\"layout horizontal center\">\n            <paper-checkbox for=\"\" id=\"rememberLogin\">[[localize('ui.login-form.remember')]]</paper-checkbox>\n            <paper-button on-click=\"validatePassword\">[[localize('ui.login-form.log_in')]]</paper-button>\n          </div>\n        </div>\n        <div id=\"validatebox\" hidden\\$=\"[[!showSpinner]]\">\n          <paper-spinner active=\"true\"></paper-spinner><br>\n          <div class=\"validatemessage\">[[computeLoadingMsg(isValidating)]]</div>\n        </div>\n      </div>\n    </div>\n`;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      connectionPromise: {\n        type: Object,\n        notify: true,\n        observer: 'handleConnectionPromiseChanged',\n      },\n\n      errorMessage: {\n        type: String,\n        value: '',\n      },\n\n      isValidating: {\n        type: Boolean,\n        observer: 'isValidatingChanged',\n        value: false,\n      },\n\n      showLoading: {\n        type: Boolean,\n        value: false,\n      },\n\n      showSpinner: {\n        type: Boolean,\n        computed: 'computeShowSpinner(showLoading, isValidating)',\n      },\n\n      password: {\n        type: String,\n        value: '',\n      },\n    };\n  }\n\n  ready() {\n    super.ready();\n    this.addEventListener('keydown', ev => this.passwordKeyDown(ev));\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.removeInitMsg();\n  }\n\n  computeLoadingMsg(isValidating) {\n    return isValidating ? 'Connecting' : 'Loading data';\n  }\n\n  computeShowSpinner(forceShowLoading, isValidating) {\n    return forceShowLoading || isValidating;\n  }\n\n  isValidatingChanged(newVal) {\n    if (!newVal) {\n      setTimeout(() => {\n        if (this.$.passwordInput.inputElement.inputElement) {\n          this.$.passwordInput.inputElement.inputElement.focus();\n        }\n      }, 10);\n    }\n  }\n\n  passwordKeyDown(ev) {\n    // validate on enter\n    if (ev.keyCode === 13) {\n      this.validatePassword();\n      ev.preventDefault();\n    // clear error after we start typing again\n    } else if (this.errorMessage) {\n      this.errorMessage = '';\n    }\n  }\n\n  validatePassword() {\n    var auth = this.password;\n    this.$.hideKeyboardOnFocus.focus();\n    this.connectionPromise = window.createHassConnection(auth);\n\n    if (this.$.rememberLogin.checked) {\n      this.connectionPromise.then(function () {\n        localStorage.authToken = auth;\n      });\n    }\n  }\n\n  handleConnectionPromiseChanged(newVal) {\n    if (!newVal) return;\n\n    var el = this;\n    this.isValidating = true;\n\n    this.connectionPromise.then(\n      function () {\n        el.isValidating = false;\n        el.password = '';\n      },\n      function (errCode) {\n        el.isValidating = false;\n\n        if (errCode === ERR_CANNOT_CONNECT) {\n          el.errorMessage = 'Unable to connect';\n        } else if (errCode === ERR_INVALID_AUTH) {\n          el.errorMessage = 'Invalid password';\n        } else {\n          el.errorMessage = 'Unknown error: ' + errCode;\n        }\n      }\n    );\n  }\n}\n\ncustomElements.define('login-form', LoginForm);\n"],"sourceRoot":""}